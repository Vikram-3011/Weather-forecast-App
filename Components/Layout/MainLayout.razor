@inherits LayoutComponentBase
@using BlazorApp.Models
@using BlazorApp.Singletons
@using BlazorApp.Services
@using BlazorApp.Controllers
@using static Supabase.Gotrue.Constants
@using Supabase
@inject PersonalInfoService personal
@inject UserStateManager userState
@inject NavigationManager NavigationManager
@inject AuthService authService
@inject SupabaseController supabase
@using BlazorApp.Models
@inject IJSRuntime JS


<MudThemeProvider IsDarkMode="@isDarkMode" />
<MudPopoverProvider />

<MudDialogProvider />
<MudSnackbarProvider />


<MudLayout>
    <MudAppBar Elevation="0" Class="d-flex justify-between px-4" Style="background-color: transparent;">
        <div class="d-flex align-center">
            <MudTooltip Text="Menu">
                <MudIconButton Icon="@Icons.Material.Filled.List" Color="Color.Inherit" OnClick="@(() => ToggleDrawer())" />
            </MudTooltip>
        </div>

        <div class="d-flex align-center" style="gap: 8px; margin-left: auto;">
            <MudText Class="mx-2">@userRole</MudText>

            @if (!userState.IsLoggedIn())
            {
                <MudTooltip Text="User LogIn">
                    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Login" Style="@($"color:{Colors.LightBlue.Lighten5};")" Href="/login">Login</MudButton>
                </MudTooltip>
            }

            @if (isDarkMode)
            {
                <MudTooltip Text=" Light Mode">
                    <MudIconButton Icon="@Icons.Material.Filled.LightMode"
                    Color="Color.Inherit"
                    OnClick="@ToggleDarkMode" />
                </MudTooltip>
            }
            else
            {
                <MudTooltip Text=" Dark Mode">
                    <MudIconButton Icon="@Icons.Material.Filled.DarkMode"
                    Color="Color.Inherit"
                    OnClick="@ToggleDarkMode" />
                </MudTooltip>
            }

            <MudTooltip Text="Profile">
                <MudIconButton Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Inherit" OnClick="@ToggleOpen" />
            </MudTooltip>
        </div>
    </MudAppBar>

    <MudPopover Open="@_open" Fixed="true" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopRight" Class="px-4 pt-4 profile-popover" OnClose="@ClosePopover">
        <div class="d-flex flex-column">

            @if (userState.IsLoggedIn())
            {
                @*  <MudText Typo="Typo.h5">@userName</MudText> *@
                <MudText Typo="Typo.h6">@userState.User?.Name</MudText>
                <MudText Typo="Typo.body2">@userState.User?.Email</MudText>
                <MudDivider Class="my-2" />
                <MudButton OnClick="@(() => NavigateTo("/user-profile"))" Variant="Variant.Text" Style="justify-content: center; text-align: center; " FullWidth="true">Profile </MudButton>

                <MudButton OnClick="Logout" StartIcon="@Icons.Material.Filled.Logout" Variant="Variant.Text" Color="Color.Error" FullWidth="true">Logout</MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Login" Href="/login">Login</MudButton>

            }
        </div>
    </MudPopover>

    <MudDrawer Open="@isOpen" Variant="DrawerVariant.Persistent">
        <MudDrawerHeader>

            <MudButton Typo="Typo.h5" OnClick="@(() => NavigateTo("/"))">Weather Forecast</MudButton>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>


    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
            @Body
        </MudContainer>
    </MudMainContent>
    @if (userState.IsLoggedIn())
    {
        <!-- 🧠 Icon-only Chatbot Button (Top-Right) -->
        <MudIconButton Icon="@Icons.Material.Outlined.SmartToy"
        Class="chatbot-icon-button"
        Color="Color.Default"
        Size="Size.Large"
        OnClick="ToggleChatbot" />


        <!-- 🧠 Embedded Chatbot Panel -->
        @if (_showChatbot)
        {
            <div class="chatbot-container">
                <MudCard Class="p-4 chatbot-card">
                    <div class="chatbot-header">
                        <MudText Typo="Typo.h4" Color="Color.Primary" Class="chatbot-title">Chatkaro</MudText>
                        <MudIconButton Icon="@Icons.Material.Filled.Close" Class="chatbot-fabclose" OnClick="ToggleChatbot" />
                    </div>
                    <WeatherChatBot />
                </MudCard>
            </div>
        }
    }

    @if (!userState.IsLoggedIn())
    {
        <div class="top-right-login-text">
            Login to unlock more features 
        </div>

    }

</MudLayout>

<style>
    body {
        background: url('images/pexels-lum3n-44775-1410224.jpg') no-repeat center center fixed;
        background-size: cover;
    }

        body::before {
            content: "";
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            Adjust opacity for darker or lighter effect z-index: -1;
        }


    .mud-appbar {
        backdrop-filter: blur(10px);
    }

   

    .chatbot-icon-button {
        position: fixed;
        bottom: 50px;
        right: 20px;
        z-index: 9999;
        color: white; /* Or any color matching your theme */
        background-color: blueviolet;
        border: none;
    }


    .chatbot-container {
        position: fixed;
        bottom: 100px;
        right: 30px;
        z-index: 1000;
        backdrop-filter: blur(10px);
        border-radius: 20px;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.25);
        background: rgba(255, 255, 255, 0.1);
    }

    .chatbot-card {
        width: 320px;
        background: rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(15px);
        border-radius: 20px;
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.3);
    }

    .chatbot-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .chatbot-title {
        font-weight: bold;
        font-size: large;
        
    }

    .chatbot-fabclose {
        color: white;
        transition: transform 0.2s ease;
    }

        .chatbot-fabclose:hover {
            transform: scale(1.2);
            color: #f44336;
        }

    .top-right-login-text {
        position: absolute;
        top: 80px;
        right: 66px;
        background-color: rgba(0, 0, 0, 0.5);
        color: white;
        font-weight: 600;
        padding: 8px 16px;
        border-radius: 8px;
        z-index: 1000;
        font-size: 0.95rem;
    }

</style>
@code
{
    private bool isOpen = false;
    private bool isDarkMode = false
    ;
    private bool _open;
    private string? userRole = "";
    private bool _showChatbot = false;

    private void ToggleDrawer() => isOpen = !isOpen;
    private void ToggleDarkMode() => isDarkMode = !isDarkMode;

   
    private void ToggleChatbot()
    {
        _showChatbot = !_showChatbot;
    }

    private void ToggleOpen()
    {
        _open = !_open;
        if (_open)
        {
            AddClickListener();
        }
        else
        {
            RemoveClickListener();
        }
        StateHasChanged();
    }

    private void ClosePopover()
    {
        _open = false;
        RemoveClickListener();
        StateHasChanged();
    }

    private void NavigateTo(string route)
    {
        _open = false;
        NavigationManager.NavigateTo(route);
    }


    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("State Change!!");
        userState.OnChange += StateChange;

        // userName = await PersonalInfoService.GetUserNameByEmailAsync(userEmail);  // thsi line is used for hte user name to showed up

        var session = authService.GetSession();
        if (session != null && session.User != null)
        {
            userState.SetUser(new User(session.User.Email, null, new List<Favourite>()));

        }
        else
        {
            userState.ClearUser();
        }

        StateChange();
    }


    private void StateChange() => InvokeAsync(StateHasChanged);

    public void Dispose() => userState.OnChange -= StateChange;


    public async void Logout()
    {
        try
        {

            await authService.SignOut(userState);
            Console.WriteLine("User logged out!");
            StateHasChanged();
            NavigationManager.NavigateTo("/", true);


            // StateChange();
            // NavigationManager.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout Error: {ex.Message}");
        }
    }

    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    private async Task AddClickListener()
    {
        await JSRuntime.InvokeVoidAsync("addDocumentClickListener", DotNetObjectReference.Create(this));
    }

    private async Task RemoveClickListener()
    {
        await JSRuntime.InvokeVoidAsync("removeDocumentClickListener");
    }

    [JSInvokable]
    public void OnDocumentClick()
    {
        if (_open)
        {   
            ClosePopover();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            RemoveClickListener();
        }
    }

  
}


@page "/"
@using BlazorApp.Controllers
@using BlazorApp.Singletons
@using BlazorApp.Services
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject AuthService auth
@inject WeatherDataService WeatherService
@inject IJSRuntime JSRuntime
@inject UserStateManager userState
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@inject GeminiWeatherSummaryService SummaryService


<PageTitle>Home</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-6">
    <MudText Typo="Typo.h3" Align="Align.Center" Class="font-bold text-white">
        Weather Dashboard
    </MudText>
    <MudText Typo="Typo.subtitle1" Align="Align.Center" Class="text-white">
        Stay updated with live weather conditions and forecasts
    </MudText>
</MudContainer>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-6">
    <MudGrid>
        <!-- LEFT SIDE -->
        <MudItem xs="12" md="6">
            <MudStack Direction="Column" Spacing="4">

                <!-- Weather Forecast -->
                <MudCard Class="glassmorphism-card pa-6 rounded-xl">
                    <MudStack Direction="Column" AlignItems="AlignItems.Center" Spacing="3">
                        <MudText Typo="Typo.h5" Class="font-weight-bold text-white"> <MudIcon Icon="@Icons.Material.Filled.WbSunny"Color="Color.Warning" Size="Size.Large "></MudIcon> Weather </MudText>
                    </MudStack>
                    <MudDivider Class="my-4" />

                    @if (CurrentWeather != null)
                    {
                        <MudStack Direction="Column" AlignItems="AlignItems.Center" Spacing="2">
                            <MudIcon Size="Size.Large" Color="Color.Primary" Icon="@GetWeatherIcon(CurrentWeather.Description)" />
                            <MudText Typo="Typo.body1" Class="text-white">Min: @($"{CurrentWeather.TempMin:F2}")°C | Max: @($"{CurrentWeather.TempMax:F2}")°C</MudText>
                            <MudText Typo="Typo.body2" Class="text-white">@CurrentWeather.Description</MudText>
                        </MudStack>
                    }
                    else
                    {
                        <div class="d-flex justify-content-center align-items-center" style="height: 100px;">
                            <MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true" />
                        </div>
                    }
                </MudCard>

                <!-- Live Location -->
                <MudCard Class="glassmorphism-card pa-6 rounded-xl">
                    <MudStack Direction="Column" AlignItems="AlignItems.Center" Spacing="3">
                        <MudText Typo="Typo.h5" Class="font-weight-bold text-white">
                            <MudIcon Icon="@Icons.Material.Filled.LocationOn" Color="Color.Primary" /> Your Location
                        </MudText>
                    </MudStack>
                    <MudDivider Class="my-4" />

                    @if (IsLoading)
                    {
                        <MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true" />
                        <MudText Typo="Typo.h6" Color="Color.Primary">Detecting your location...</MudText>
                    }
                    else if (ErrorMessage != null)
                    {
                        <MudStack Direction="Column" AlignItems="AlignItems.Center" Spacing="2">
                            <MudIcon Icon="@Icons.Material.Filled.Error" Size="Size.Large" Color="Color.Error" />
                            <MudText Typo="Typo.h6" Color="Color.Error">@ErrorMessage</MudText>
                        </MudStack>
                    }
                    else
                    {
                        <MudPaper Class="glassmorphism-card p-4 rounded-md">
                            <MudStack Direction="Column" AlignItems="AlignItems.Center" Spacing="2">
                                <MudText Typo="Typo.h6" Class="text-white">
                                    <MudIcon Icon="@Icons.Material.Filled.LocationOn" Color="Color.Primary" Class="mr-1" />
                                    <strong>Address:</strong> @FullAddress
                                </MudText>
                            </MudStack>
                        </MudPaper>
                    }
                </MudCard>

                <!-- Weather Summary Section -->
                <MudCard Class="glassmorphism-card pa-6 rounded-xl mt-4">
                    <MudStack Direction="Column" AlignItems="AlignItems.Center" Spacing="3">
                        <MudText Typo="Typo.h5" Class="font-weight-bold text-white">
                            <MudIcon Icon="@Icons.Material.Filled.Description" Color="Color.Primary" /> AI Weather Summary
                        </MudText>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GenerateSummary">
                            Get AI Summary
                        </MudButton>
                    </MudStack>
                    <MudDivider Class="my-4" />
                    @if (!string.IsNullOrEmpty(weatherSummary))
                    {
                        <MudText Typo="Typo.body1" Class="text-white">@weatherSummary</MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.body2" Class="text-white">Click the button to generate a summary.</MudText>
                    }
                </MudCard>
            </MudStack>
        </MudItem>

        <!-- RIGHT SIDE -->
        <MudItem xs="12" md="6">
            <MudStack Direction="Column" AlignItems="AlignItems.Center" Spacing="2">
                <MudText Typo="Typo.h5" Class="font-bold text-center text-white">
                    <MudIcon Icon="@Icons.Material.Filled.LocationCity" Color="Color.Primary" Class="mr-1" />
                    Top Cities Weather
                </MudText>
            </MudStack>
            <MudDivider Class="my-4" />

            @if (isLoading)
            {
                <div class="d-flex justify-content-center my-4">
                    <MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true" />
                </div>
            }
            else if (WeatherService.GlobalCityWeather.Count > 0)
            {
                <MudGrid>
                    @foreach (var city in WeatherService.GlobalCityWeather)
                    {
                        <MudItem xs="12" sm="6">
                            <MudCard Class="glassmorphism-card mb-6 pa-4 rounded-xl text-center city-card">
                                <MudText Typo="Typo.h6" Class="font-bold text-white">@city.CityName, @city.Country</MudText>
                                <MudIcon Size="Size.Large" Color="Color.Primary" Icon="@GetWeatherIcon(city.Description)" />
                                <MudText Typo="Typo.h6" Class="text-white">@city.Description</MudText>
                                <MudText Typo="Typo.body1" Class="text-white">@($"{city.TempMin:F2}")°C - @($"{city.TempMax:F2}")°C</MudText>
                                
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            }
        </MudItem>
    </MudGrid>
</MudContainer>

<style>
    body {
        background: linear-gradient(to right, #3a0ca3, #240046);
        margin: 0;
        padding: 0;
    }

    .glassmorphism-card {
        background: rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(15px);
        -webkit-backdrop-filter: blur(15px);
        border-radius: 12px;
        border: 1px solid rgba(255, 255, 255, 0.15);
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
    }

    .text-white {
        color: #dcdcdc !important;
    }

    .city-card:hover {
        transform: translateY(-5px);
        box-shadow: 0px 10px 20px rgba(0, 173, 255, 0.4); /* Violet hover */
        transition: all 0.3s ease-in-out;
    }
</style>


@code
{
    private string GetCityImageUrl(string cityName)
    {
        // Make sure the city name matches the keys in the dictionary
        if (cityImageMap.TryGetValue(cityName, out var imageUrl))
        {
            return imageUrl; // Return the image URL from the dictionary
        }

        // Fallback image if the city is not found in the map
        return "https://via.placeholder.com/400x300?text=No+Image";
    }

    private Dictionary<string, string> cityImageMap = new()
{
    { "New York", "https://upload.wikimedia.org/wikipedia/commons/c/c7/New_York_City_at_night_HDR.jpg" },
    { "London", "https://upload.wikimedia.org/wikipedia/commons/c/cd/London_Montage_L.jpg" },
    { "Paris", "https://upload.wikimedia.org/wikipedia/commons/e/e6/Paris_Night.jpg" },
    { "Tokyo", "https://upload.wikimedia.org/wikipedia/commons/9/94/Tokyo_Skyline_Night.jpg" },
    { "Dubai", "https://upload.wikimedia.org/wikipedia/commons/6/66/Dubai_Skyline_at_night.jpg" }
};


    private string GetWeatherIcon(string description)
    {
        if (description.Contains("rain", StringComparison.OrdinalIgnoreCase)) return Icons.Material.Filled.Umbrella;
        if (description.Contains("cloud", StringComparison.OrdinalIgnoreCase)) return Icons.Material.Filled.Cloud;
        if (description.Contains("clear", StringComparison.OrdinalIgnoreCase)) return Icons.Material.Filled.WbSunny;
        if (description.Contains("storm", StringComparison.OrdinalIgnoreCase)) return Icons.Material.Filled.Bolt;
        return Icons.Material.Filled.WbCloudy;
    }


    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadWeatherData();

        await FetchLocation();
    }
    void NavigateToLogin()  
    {
        NavigationManager.NavigateTo("/login"); // navigation to the weather page
    }

    void NavigateToSignup()
    {
        NavigationManager.NavigateTo("/signup"); // navigation to the weather page
    }
    private async Task LoadWeatherData()
    {
        isLoading = true;
        await WeatherService.FetchGlobalCityWeather();
        isLoading = false;
    }
    private string? user = "";

    protected override void OnInitialized()
    {
        user = auth.GetSession()?.User?.Email;
        
    }

    // Method to navigate to another page
    void NavigateToWeather()
    {
        NavigationManager.NavigateTo("/weather"); // navigation to the weather page
    }



    private bool IsLoading = false;
    private string? ErrorMessage = null;
    private double Latitude;
    private double Longitude;
    private double Accuracy;
    private string? FullAddress;
    private CityWeather? CurrentWeather;

    private string weatherSummary;

    private async Task GenerateSummary()
    {
        if (CurrentWeather == null)
        {
            weatherSummary = "No current weather data available to summarize.";
            return;
        }

        var weatherData = new WeatherData
            {
                Temperature = (CurrentWeather.TempMin + CurrentWeather.TempMax) / 2,
                Description = CurrentWeather.Description
            };

        weatherSummary = await SummaryService.GenerateSummaryAsync(weatherData.ToString());
    }


    private async Task FetchLocation()
    {
        IsLoading = true;
        ErrorMessage = null;

        try
        {
            // Fetch Latitude and Longitude
            var location = await JSRuntime.InvokeAsync<Location>("getUserLocation");
            Latitude = location.Latitude;
            Longitude = location.Longitude;
            Accuracy = location.Accuracy;

            var address = await GetAddressFromCoordinates(Latitude, Longitude);
            FullAddress = address?.ToString() ?? "Unknown Address"; // Fix applied

            await FetchCurrentLocationWeather();
            
        }
        catch (Exception ex)
        {
            ErrorMessage = "Failed to retrieve location. Please enable location access.";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task FetchCurrentLocationWeather()
    {
        string apiKey = "596a1e71b480c1efbdbdd4da71b6f8da";
        string requestUri = $"https://api.openweathermap.org/data/2.5/weather?lat={Latitude}&lon={Longitude}&appid={apiKey}&units=metric";

        try
        {
            using var client = HttpClientFactory.CreateClient();
            var response = await client.GetAsync(requestUri);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var weatherResponse = JsonSerializer.Deserialize<CityWeatherResponse>(json, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                if (weatherResponse != null)
                {
                    CurrentWeather = new CityWeather
                        {
                            CityName = "Your Location",
                            TempMin = weatherResponse.Main.TempMin,
                            TempMax = weatherResponse.Main.TempMax,
                            Description = weatherResponse.Weather[0].Description
                        };
                }
            }
        }
        catch (Exception)
        {
            ErrorMessage = "Failed to fetch weather data.";
        }
    }
    private async Task<Address> GetAddressFromCoordinates(double latitude, double longitude)
    {
        string apiKey = "fbfb336510e44728a2c31f80d3b6b1d5"; // Replace with your API key
        string url = $"https://api.opencagedata.com/geocode/v1/json?q={latitude}+{longitude}&key={apiKey}";

        using var client = new HttpClient();
        var response = await client.GetFromJsonAsync<OpenCageResponse>(url);

        if (response != null && response.Results.Count > 0)
        {
            var components = response.Results[0].Components;
            return new Address
                {
                    Street = components.Road,
                    Town = components.Town ?? components.Village,
                    City = components.City,
                    District = components.County,
                    State = components.State,
                    Country = components.Country
                };
        }

        throw new Exception("Unable to fetch location details.");
    }

    private class Location
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public double Accuracy { get; set; }
    }

    private class Address
    {
        public string? Street { get; set; }
        public string? Town { get; set; }
        public string? City { get; set; }
        public string? District { get; set; }
        public string? State { get; set; }
        public string? Country { get; set; }

        public override string ToString()
        {
            return $"{Street}, {Town}, {City},{District}, {State}, {Country}";
        }
    }

    private class OpenCageResponse
    {
        public List<Result> Results { get; set; } = new();

        public class Result
        {
            public Components Components { get; set; } = new();
        }

        public class Components
        {
            public string? Road { get; set; }
            public string? Town { get; set; }
            public string? Village { get; set; }
            public string? City { get; set; }
            public string? County { get; set; }
            public string? State { get; set; }
            public string? Country { get; set; }
        }
    }
    private class WeatherData
    {
        public double Temperature { get; set; }
        public string Description { get; set; }

        public override string ToString()
        {
            return $"Temperature: {Temperature}°C. Condition: {Description}.";
        }

    }



}
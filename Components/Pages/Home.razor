@page "/"
@using BlazorApp.Controllers
@using BlazorApp.Singletons
@using BlazorApp.Services
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject AuthService auth 
@inject WeatherDataService WeatherService
@inject IJSRuntime JSRuntime
@inject UserStateManager userState

<PageTitle>Home</PageTitle>

<MudText Typo="Typo.h3" Align="Align.Center">Weather Forecast</MudText>
<MudText Typo="Typo.body1" Align="Align.Center">Welcome to  forecast</MudText>

@* @if (!userState.IsLoggedIn())
{
    <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4" Style="display: flex; justify-content: center;">
        <MudCard Elevation="4" Class="pa-4" Style="text-align: center; width: 600px; height: 230px;">
            <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-4">
                "To access exclusive features in the weather forecast, simply log in or sign up. Gain access to advanced weather insights and enjoy more features to enhance your experience!"
            </MudText>
            <MudContainer Style="display: flex; justify-content: space-evenly; margin-top: 35px;">
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="NavigateToLogin" Style="width: 120px;">
                    Login
                </MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="NavigateToSignup" Style="width: 120px;">
                    Sign Up
                </MudButton>
            </MudContainer>
        </MudCard>
    </MudContainer>
} *@


<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-2">
    <MudCard Elevation="4" Class="pa-6 rounded-lg glassmorphism">
        <MudStack Direction="Column" AlignItems="AlignItems.Center" >
            <MudIcon Color="Color.Primary" />
            <MudText Typo="Typo.h5" Class="font-weight-bold text-primary">
                Your Live Location <MudIcon Icon="@Icons.Material.Filled.LocationOn"></MudIcon>
            </MudText>
        </MudStack>

        <MudDivider Class="my-2" />

        @if (IsLoading)
        {
            <MudStack Direction="Column" AlignItems="AlignItems.Center" Spacing="2">
                <MudProgressCircular Size="Size.Medium" Color="Color.Primary" Indeterminate="true" />
                <MudText Typo="Typo.h6" Color="Color.Primary" Align="Align.Center" Class="mt-3">
                    Detecting your location...
                </MudText>
            </MudStack>
        }
        else if (ErrorMessage != null)
        {
            <MudStack Direction="Column" AlignItems="AlignItems.Center" Spacing="2">
                <MudIcon Icon="@Icons.Material.Filled.Error" Size="Size.Large" Color="Color.Error" />
                <MudText Typo="Typo.h6" Color="Color.Error" Align="Align.Center">
                    @ErrorMessage
                </MudText>
            </MudStack>
        }
        else
        {
            <MudPaper Elevation="4" Class="p-4 rounded-md location-card">
                <MudStack Direction="Column" AlignItems="AlignItems.Center">
                    <MudText Typo="Typo.h6" Align="Align.Center">
                        <MudIcon Icon="@Icons.Material.Filled.LocationOn" Color="Color.Primary" Class="mr-1" />
                        <strong>Address:</strong> @FullAddress
                    </MudText>
                    @if(userState.IsLoggedIn()){
                        
                  
                     <MudText Typo="Typo.body1" Align="Align.Center">
                        <MudIcon Icon="@Icons.Material.Outlined.Explore" Color="Color.Secondary" Class="mr-1" />
                        Latitude: @Latitude
                    </MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">
                        <MudIcon Icon="@Icons.Material.Outlined.Explore" Color="Color.Secondary" Class="mr-1" />
                        Longitude: @Longitude
                    </MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">
                        <MudIcon Icon="@Icons.Material.Outlined.Speed" Color="Color.Tertiary" Class="mr-1" />
                        Accuracy: @Accuracy meters
                    </MudText>

                    }
                </MudStack>
            </MudPaper>

           
        }

        <MudDivider Class="my-4" />

        <MudStack Direction="Row" Justify="Justify.Center" AlignItems="AlignItems.Center">
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="FetchLocation" Style="width: 220px;">
                <MudIcon Icon="@Icons.Material.Filled.MyLocation" Class="mr-2" />
                Get My Location
            </MudButton>
        </MudStack>
    </MudCard>
</MudContainer>

<MudText Typo="Typo.h5" Class="pt-13 pb-15 pb-4 pl-4 pr-4">
    Top 5 Global Cities Weather <MudIcon Icon="@Icons.Material.Filled.Public"></MudIcon>
</MudText>

@if (isLoading)
{
    <div class="d-flex justify-content-center my-4">
        <MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true" />
    </div>
}
else if (WeatherService.GlobalCityWeather.Count > 0)
{
    <MudGrid Class="d-flex justify-content-center">
        @foreach (var city in WeatherService.GlobalCityWeather)
        {
            <MudItem Class="p-2">
                <MudCard Elevation="4" Class="weather-card">
                    <MudStack Direction="Column" AlignItems="AlignItems.Center" Spacing="2">
                        <MudText Typo="Typo.h6" Class="city-name">@city.CityName, @city.Country</MudText>
                        <MudIcon Size="Size.Large" Color="Color.Primary" Icon="@GetWeatherIcon(city.Description)" />
                        <MudText Typo="Typo.body1" Class="temperature-text">
                            Min: @($"{city.TempMin:F2}")°C | Max: @($"{city.TempMax:F2}")°C
                        </MudText>
                        <MudText Typo="Typo.body2" Class="weather-description">@city.Description</MudText>
                    </MudStack>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}





<style>

    .weather-card {
        padding: 16px;
        border-radius: 10px;
        text-align: center;
        background-color: var(--mud-palette-background);
        transition: background-color 0.3s ease, color 0.3s ease;
    }

    .city-name {
        font-weight: bold;
        color: var(--mud-palette-text-primary);
    }

    .temperature-text {
        font-weight: bold;
        color: var(--mud-palette-warning);
    }

    .weather-description {
        color: var(--mud-palette-text-secondary);
    }

</style>





@code
{
    private string GetCityImageUrl(string cityName)
    {
        // Make sure the city name matches the keys in the dictionary
        if (cityImageMap.TryGetValue(cityName, out var imageUrl))
        {
            return imageUrl; // Return the image URL from the dictionary
        }

        // Fallback image if the city is not found in the map
        return "https://via.placeholder.com/400x300?text=No+Image";
    }

    private Dictionary<string, string> cityImageMap = new()
{
    { "New York", "https://upload.wikimedia.org/wikipedia/commons/c/c7/New_York_City_at_night_HDR.jpg" },
    { "London", "https://upload.wikimedia.org/wikipedia/commons/c/cd/London_Montage_L.jpg" },
    { "Paris", "https://upload.wikimedia.org/wikipedia/commons/e/e6/Paris_Night.jpg" },
    { "Tokyo", "https://upload.wikimedia.org/wikipedia/commons/9/94/Tokyo_Skyline_Night.jpg" },
    { "Dubai", "https://upload.wikimedia.org/wikipedia/commons/6/66/Dubai_Skyline_at_night.jpg" }
};


     private string GetWeatherIcon(string description)
    {
        if (description.Contains("rain", StringComparison.OrdinalIgnoreCase)) return Icons.Material.Filled.Umbrella;
        if (description.Contains("cloud", StringComparison.OrdinalIgnoreCase)) return Icons.Material.Filled.Cloud;
        if (description.Contains("clear", StringComparison.OrdinalIgnoreCase)) return Icons.Material.Filled.WbSunny;
        if (description.Contains("storm", StringComparison.OrdinalIgnoreCase)) return Icons.Material.Filled.Bolt;
        return Icons.Material.Filled.WbCloudy;
    }


    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadWeatherData();
    }
    void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login"); // navigation to the weather page
    }

    void NavigateToSignup()
    {
        NavigationManager.NavigateTo("/signup"); // navigation to the weather page
    }
    private async Task LoadWeatherData()
    {
        isLoading = true;
        await WeatherService.FetchGlobalCityWeather();
        isLoading = false;
    }
    private string? user = "";

    protected override void OnInitialized()
    {
        user = auth.GetSession()?.User?.Email;

    }

    // Method to navigate to another page
    void NavigateToWeather()
    {
        NavigationManager.NavigateTo("/weather"); // navigation to the weather page
    }

    
  
private bool IsLoading = false;
private string? ErrorMessage = null;
private double Latitude;
private double Longitude;
private double Accuracy;
private string? FullAddress;

private async Task FetchLocation()
{
IsLoading = true;
ErrorMessage = null;

try
{
        // Fetch Latitude and Longitude
        var location = await JSRuntime.InvokeAsync<Location>("getUserLocation");
        Latitude = location.Latitude;
        Longitude = location.Longitude;
        Accuracy = location.Accuracy;

        // Fetch Full Address using Reverse Geocoding API
        var address = await GetAddressFromCoordinates(Latitude, Longitude);
        FullAddress = address.ToString();
            StateHasChanged();
}
catch (Exception ex)
{
        ErrorMessage = ex.Message;
}
finally
{
        IsLoading = false;
}
}

private async Task<Address> GetAddressFromCoordinates(double latitude, double longitude)
{
        string apiKey = "fbfb336510e44728a2c31f80d3b6b1d5"; // Replace with your API key
string url = $"https://api.opencagedata.com/geocode/v1/json?q={latitude}+{longitude}&key={apiKey}";

using var client = new HttpClient();
var response = await client.GetFromJsonAsync<OpenCageResponse>(url);

if (response != null && response.Results.Count > 0)
{
        var components = response.Results[0].Components;
        return new Address
{
Street = components.Road,
Town = components.Town ?? components.Village,
City = components.City,
District = components.County,
State = components.State,
Country = components.Country
};
}

throw new Exception("Unable to fetch location details.");
}

private class Location
{
    public double Latitude { get; set; }
    public double Longitude { get; set; }
    public double Accuracy { get; set; }
}

private class Address
{
    public string? Street { get; set; }
    public string? Town { get; set; }
    public string? City { get; set; }
    public string? District { get; set; }
    public string? State { get; set; }
    public string? Country { get; set; }

    public override string ToString()
    {
            return $"{Street}, {Town}, {City},{District}, {State}, {Country}";
    }
}

private class OpenCageResponse
{
    public List<Result> Results { get; set; } = new();

    public class Result
    {
        public Components Components { get; set; } = new();
    }

    public class Components
    {
        public string? Road { get; set; }
        public string? Town { get; set; }
        public string? Village { get; set; }
        public string? City { get; set; }
        public string? County { get; set; }
        public string? State { get; set; }
        public string? Country { get; set; }
    }
}
    

}
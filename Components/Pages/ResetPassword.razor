@page "/reset-password"
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@using BlazorApp.Services
@inject IJSRuntime JS


<MudText Typo="Typo.h4" Align="Align.Center">Reset Password</MudText>
<MudContainer MaxWidth="MaxWidth.Large" Class="d-flex justify-content-center align-top" Style="padding-top: 80px;">
    <MudCard Class="pa-4 elevation-2 rounded-lg" Style="width: 450px;">
        <MudCardContent>
            <MudTypography Variant="H4" Align="Center" Class="mb-4">Reset Your Password</MudTypography>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Dense="true" Variant="Variant.Outlined" Class="mb-3">@errorMessage</MudAlert>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <MudAlert Severity="Severity.Success" Dense="true" Variant="Variant.Outlined" Class="mb-3">@successMessage</MudAlert>
            }
            else
            {
                <EditForm Model="resetModel" OnValidSubmit="HandlePasswordReset">
                    <MudTextField Label="New Password" @bind-Value="resetModel.NewPassword" Type="password" 
                                  Required Adornment="Adornment.End" AdornmentIcon="Icons.Material.Filled.Lock" 
                                  Class="mb-4" FullWidth="true" />

                    <MudButton Type="Submit" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Size="Size.Large">
                        Reset Password
                    </MudButton>
                </EditForm>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private ResetPasswordModel resetModel = new();
    private string? errorMessage;
    private string? successMessage;
    private string? accessToken;
    private string newPassword { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        // Get access token from fragment using JavaScript
        accessToken = await JS.InvokeAsync<string>("getFragmentToken");

        if (string.IsNullOrEmpty(accessToken))
        {
            // Show error if no token is found
            Snackbar.Add("Invalid or expired password reset link.", Severity.Error);
        }
    }

    private async Task HandlePasswordReset()
    {
        if (string.IsNullOrEmpty(accessToken))
        {
            Snackbar.Add("Invalid or expired password reset link.", Severity.Error);
            return;
        }

        var result = await AuthService.ResetPassword(accessToken, newPassword);

        if (result)
        {
            Snackbar.Add("Password reset successful!", Severity.Success);
            Navigation.NavigateTo("/login");
        }
        else
        {
            Snackbar.Add("Failed to reset password. Please try again.", Severity.Error);
        }
    }
    public class ResetPasswordModel
    {
        public string NewPassword { get; set; } = string.Empty;
    }
}

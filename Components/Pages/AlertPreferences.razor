@page "/alert-preferences"
@inject DatabaseController databaseController
@inject UserStateManager userState
@inject NavigationManager NavigationManager
@inject ISnackbar snackbar
@using BlazorApp.Models
@using BlazorApp.Controllers
@using BlazorApp.Singletons

<PageTitle>Alert Preferences</PageTitle>

<MudCard Class="p-4">
    <MudText Typo="Typo.h4">Set Your Weather Alert Preferences</MudText>

    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else
    {
        <MudForm>
            <MudSelect T="string" Label="Select City" @bind-SelectedValue="selectedCity" @onchange="LoadPreferences">
                @foreach (var city in favoriteCities)
                {
                    <MudSelectItem T="string" Value="@city">@city</MudSelectItem>
                }
            </MudSelect>

            <MudCheckBox T="bool" Label="Temperature Alerts" Checked="@alertPreferences.TemperatureAlert"
                         CheckedChanged="(EventCallback<bool>)(val => alertPreferences.TemperatureAlert = val)" />

            <MudCheckBox T="bool" Label="Wind Speed Alerts" Checked="@alertPreferences.WindAlert"
                         CheckedChanged="(EventCallback<bool>)(val => alertPreferences.WindAlert = val)" />

            <MudCheckBox T="bool" Label="Rain Alerts" Checked="@alertPreferences.RainAlert"
                         CheckedChanged="(EventCallback<bool>)(val => alertPreferences.RainAlert = val)" />

            <MudCheckBox T="bool" Label="Air Quality Alerts" Checked="@alertPreferences.AirQualityAlert"
                         CheckedChanged="(EventCallback<bool>)(val => alertPreferences.AirQualityAlert = val)" />

            <MudButton Color="Color.Primary" OnClick="SavePreferences">Save Preferences</MudButton>
        </MudForm>
    }
</MudCard>

@code {
    private BlazorApp.Models.AlertPreferences alertPreferences = new();
    private List<string> favoriteCities = new();
    private string selectedCity = "";
    private bool isLoading = true;
    private string userEmail = "";

    protected override async Task OnInitializedAsync()
    {
        userEmail = userState.UserEmail;

        if (!string.IsNullOrEmpty(userEmail))
        {
            favoriteCities = (await databaseController.GetFavoriteCitiesByUser(userEmail))
                .Select(c => c.CityName).ToList();

            if (favoriteCities.Any())
            {
                selectedCity = favoriteCities.First();
                await LoadPreferences();
            }
        }
        isLoading = false;
    }

    private async Task LoadPreferences()
    {
        if (!string.IsNullOrEmpty(selectedCity))
        {
            alertPreferences = await databaseController.GetUserAlertPreferences(userEmail, selectedCity);
            StateHasChanged();
        }
    }
    private async Task SavePreferences()
    {
        Console.WriteLine($"Saving Preferences: {selectedCity} - {alertPreferences.TemperatureAlert}, {alertPreferences.WindAlert}, {alertPreferences.RainAlert}, {alertPreferences.AirQualityAlert}");

        if (!string.IsNullOrEmpty(selectedCity))
        {
            await databaseController.SaveUserAlertPreferences(userEmail, selectedCity, alertPreferences);
            snackbar.Add("Preferences saved successfully!", Severity.Success);
        }
    }

}

    @page "/weather"
    @using System.Text.Json
    @using System.Text.Json.Serialization
    @using System.Collections.Generic
    @inject IHttpClientFactory ClientFactory
    @inject UserStateManager userState
    @inject DatabaseController databaseController
    @using BlazorApp.Controllers
    @using BlazorApp.Singletons
    @using BlazorApp.Models
    @using MongoDB.Bson;
    @inject ISnackbar Snackbar
    @inject IJSRuntime JS
    @using System.Globalization
    @using BlazorApp.Services
    @inject WeatherService weatherService
    @inject GeminiWeatherSummaryService geminiService
    @using System.Text

    <PageTitle>Weather Forecast</PageTitle>

    <MudText Typo="Typo.h3" Align="Align.Center" Class="title" Style="color:white;">WEATHER FORECAST</MudText>

    <MudCard Class="weather-card rounded-xl mx-auto my-6 py-8 px-6 glass-card" Elevation="5">
        <MudContainer MaxWidth="MaxWidth.Small">
            <MudTextField @bind-Value="@cityName"
            Label="Enter City Name"
            Variant="Variant.Filled"
            Class="custom-input mb-4"
            Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.LocationOn"
            Required
            OnKeyDown="HandleKeyDown" />

            <MudTextField @bind-Value="@numDays"
            Label="Enter Days (1-5)"
            Variant="Variant.Filled"
            Type="number"
            Class="custom-input mb-4"
            Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.CalendarToday" />

            <MudTooltip Text="Fetch Weather Forecast">
                <MudButton OnClick="@FetchWeatherData" Variant="Variant.Filled" Color="Color.Primary" Class="w-full mb-2">
                    <MudIcon Icon="@Icons.Material.Outlined.CloudQueue" Class="mr-2" />
                    Get Weather
                </MudButton>
            </MudTooltip>

            @if (userState.IsLoggedIn())
            {
                <MudTooltip Text="Add to Fav cities">
                    <MudButton OnClick="@SaveToFavorites" StartIcon="@Icons.Material.Filled.Favorite" Variant="Variant.Text" Color="Color.Secondary" Class="w-full ml-4 pl-3">
                        Add to Fav cities
                    </MudButton>
                </MudTooltip>
            }
        </MudContainer>
    </MudCard>

    @if(userState.IsLoggedIn()){

@if (!string.IsNullOrWhiteSpace(forecastSummary))
{
    <MudPaper Class="p-4 my-3 forecast-summary " Elevation="4" Style="background: rgba(255, 255, 255, 0.05); border-radius: 12px;">
        <MudText Typo="Typo.h6" Color="Color.Warning" Class="mb-2">Weather Summary :</MudText>
        <MudText Typo="Typo.body1">@forecastSummary</MudText>
    </MudPaper>
    }        
    }






    @if (dailyForecasts != null && dailyForecasts.Count > 0)
    {
        <MudText Typo="Typo.h5" Align="Align.Center" Class="text-white mb-4">Weather Forecast for @cityName</MudText>

        <MudGrid JustifyContent="Center" Class="mt-4">
            @foreach (var forecast in dailyForecasts)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Class="glass-card-forecast p-4 text-center mb-8 " Elevation="6">

                        <MudText Typo="Typo.h6" Class="text-white;">@forecast.Date.ToString("dddd, MMM dd")</MudText>
                        <div style="justify-content:center; align-content:center;">
                            <img src="@GetWeatherIcon(forecast.Icon)" alt="@forecast.Description" width="80" height="80" class="my-2" />
                        </div>
                        <MudText Typo="Typo.h6" Class="text-white; mb-3">@forecast.Description</MudText>
                        <MudText Typo="Typo.body2" Class="text-white">Temp: Min @forecast.TempMin°C - Max @forecast.TempMax°C</MudText>
                        <MudText Typo="Typo.body2" Class="text-white">Feels Like: @forecast.FeelsLike°C</MudText>
                        <MudText Typo="Typo.body2" Class="text-white">Wind: @forecast.WindSpeed m/s</MudText>

                        @if (userState.IsLoggedIn())
                        {
                            <MudText Typo="Typo.body2" Class="text-white">Humidity: @forecast.Humidity%</MudText>
                            <MudText Typo="Typo.body2" Class="text-white">Pressure: @forecast.Pressure</MudText>
                            <MudText Typo="Typo.body2" Class="text-white">Sea Level: @forecast.SeaLevel</MudText>
                            <MudText Typo="Typo.body2" Class="text-white">Ground Level: @forecast.GroundLevel</MudText>
                        }
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
    else if (showError)
    {
        Snackbar.Add($"Failed to fetch weather data for {cityName}.", Severity.Error);

    }

    <style>
        .weather-card {
            backdrop-filter: blur(16px) saturate(180%);
            -webkit-backdrop-filter: blur(16px) saturate(180%);
            background-color: rgba(255, 255, 255, 0.08);
            border-radius: 16px;
            border: 1px solid rgba(255, 255, 255, 0.18);
            color: white;
            max-width: 500px;
            -webkit-text-fill-color:white;
        }

        .custom-input .mud-input-root {
            background-color: rgba(255, 255, 255, 0.05);
            border-radius: 12px;
        }

        .mud-button {
            border-radius: 12px;
        }

        .glass-card-forecast {
            backdrop-filter: blur(14px) saturate(150%);
            -webkit-backdrop-filter: blur(14px) saturate(150%);
            background-color: rgba(255, 255, 255, 0.07);
            border: 1px solid rgba(255, 255, 255, 0.15);
            border-radius: 18px;
            color: white;
            transition: transform 0.3s ease;
        
        }

            .glass-card-forecast:hover {
                transform: scale(1.03);
                border-color: rgba(0, 173, 255, 0.5); /* Blue neon border */
                box-shadow: 0 0 20px rgba(0, 173, 255, 0.4);
            }

        .title {
            font-size: 24px;
            font-weight: 600;
            letter-spacing: 3px;
            color: #dcdcdc;
        }
    
        .forecast-summary{

            color:white;

        }
    </style>

    @code {
        private string cityName = string.Empty;
        private int numDays = 5;
        private List<DailyForecast> dailyForecasts;
        private bool showError = false;
        private int searchCount = 0;  // Track the number of searches
        private readonly int maxSearches = 5;

        private bool showTemperatureChart = false;
        private bool showHumidityChart = false;
        private bool showWindSpeedChart = false;
        private List<string> userAlertPreferences = new();

        private List<string> Labels { get; set; } = new();
        private List<ChartSeries> TemperatureSeries { get; set; } = new();
        private List<ChartSeries> HumiditySeries { get; set; } = new();
        private List<ChartSeries> WindSpeedSeries { get; set; } = new();

        private string forecastSummary = "";
        private List<WeatherForecastData> forecastData;


    

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender && !userState.IsLoggedIn())
            {
                searchCount = await GetSearchCount();  // Get search count from localStorage
                StateHasChanged(); // Re-render the component
            }

        }

        private async Task FetchWeatherData()
        {
            showError = false;

            if (string.IsNullOrWhiteSpace(cityName) || numDays < 1 || numDays > 5)
            {
                showError = true;
                return;
            }

            if (!userState.IsLoggedIn())
            {
                if (searchCount >= maxSearches)
                {
                    Snackbar.Add("Search limit reached! Please log in to continue.", Severity.Warning);
                    return;
                }

                searchCount++;
                await SetSearchCount(searchCount);
            }

            var client = ClientFactory.CreateClient();
            var requestUri = $"https://api.openweathermap.org/data/2.5/forecast?q={Uri.EscapeDataString(cityName)}&appid=596a1e71b480c1efbdbdd4da71b6f8da";

            try
            {
                var response = await client.GetAsync(requestUri);
                if (response.IsSuccessStatusCode)
                {
                    var json = await response.Content.ReadAsStringAsync();
                    var forecastResponse = JsonSerializer.Deserialize<ForecastResponse>(json, new JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true
                        });

                    if (forecastResponse != null)
                    {
                        dailyForecasts = forecastResponse.List
                            .GroupBy(forecast => DateTimeOffset.FromUnixTimeSeconds(forecast.Dt).Date)
                            .Take(numDays)
                            .Select(group => new DailyForecast
                                {
                                    Date = group.Key,
                                    TempMin = Convert.ToInt32(group.Min(f => f.Main.TempMin)),
                                    TempMax = Convert.ToInt32(group.Max(f => f.Main.TempMax)),
                                    FeelsLike = Convert.ToInt32(group.Average(f => f.Main.FeelsLike)),
                                    Icon = group.First().Weather[0].Icon,
                                    Description = group.First().Weather[0].Description,
                                    Humidity = Convert.ToInt32(group.Average(f => f.Main.Humidity)),
                                    Pressure = Convert.ToInt32(group.Average(f => f.Main.Pressure)),
                                    WindSpeed = group.Average(f => f.Wind.Speed),
                                    SeaLevel = group.First().Main.SeaLevel,  // Get Sea Level pressure from main data
                                    GroundLevel = group.First().Main.GroundLevel,

                                })
                            .ToList();

                        await LoadWeatherData();
                    var summaryInput = BuildWeatherSummaryInput(dailyForecasts);
                    forecastSummary = await geminiService.GenerateForecastSummaryAsync(summaryInput);

                    }


                }
                else
                {
                    showError = true;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                showError = true;
            }
        }

        private string BuildWeatherSummaryInput(List<DailyForecast> forecasts)
        {
            var sb = new StringBuilder();

            foreach (var forecast in forecasts)
            {
                sb.AppendLine($"{forecast.Date:dddd, MMM dd}:");
                sb.AppendLine($"  Description: {forecast.Description}");
                sb.AppendLine($"  Temp Min: {forecast.TempMin}°C, Max: {forecast.TempMax}°C");
                sb.AppendLine($"  Feels Like: {forecast.FeelsLike}°C");
                sb.AppendLine($"  Wind: {forecast.WindSpeed:F1} m/s");
                sb.AppendLine($"  Humidity: {forecast.Humidity}%");
                sb.AppendLine();
            }

            return sb.ToString();
        }

        private async Task<int> GetSearchCount()
        {
            try
            {
                var count = await JS.InvokeAsync<int?>("localStorage.getItem", "weatherSearchCount");
                return count ?? 0;
            }
            catch
            {
                return 0;
            }
        }

        // Set search count in localStorage
        private async Task SetSearchCount(int count)
        {
            await JS.InvokeVoidAsync("localStorage.setItem", "weatherSearchCount", count);
        }

        // Reset search count when the user logs in
        private async Task ResetSearchCount()
        {
            await SetSearchCount(0);
        }
        private async Task SaveToFavorites()
    {
        if (!string.IsNullOrWhiteSpace(cityName) && userState.IsLoggedIn())
        {
            var userEmail = userState.UserEmail;

            if (!string.IsNullOrEmpty(userEmail))
            {
                await databaseController.AddFavoriteCity(cityName, userEmail);
                Snackbar.Add($"{cityName} added to favorites!", Severity.Success);
            }
            else
            {
                Console.WriteLine("User email is null or empty in UserStateManager.");
                Snackbar.Add("Unable to determine user email. Please log in again.", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Please enter a city name and ensure you're logged in.", Severity.Warning);
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await FetchWeatherData();
        }
    }

    [Inject] NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadWeatherData();
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var city = queryParams["city"];
      
        if (!string.IsNullOrEmpty(city))
        {
            cityName = city;
            await FetchWeatherData(); // Automatically fetch weather on page load
        }
        
    }

    private string GetWeatherIcon(string iconCode)
    {
        if (string.IsNullOrEmpty(iconCode))
        {
            // Default to a cloud icon (partly cloudy) instead of an empty image
            return "https://openweathermap.org/img/wn/02d@2x.png";
        }

        return $"https://openweathermap.org/img/wn/{iconCode}@2x.png";
    }

    private async Task LoadWeatherData()
    {
        var forecasts = await GetWeatherForecasts();
        Labels.Clear();
        TemperatureSeries.Clear();
        HumiditySeries.Clear();
        WindSpeedSeries.Clear();

        var maxTemps = new List<double>();
        var minTemps = new List<double>();
        var currentHumidities = new List<double>();
        var normalHumidities = new List<double> { 70, 65, 68, 72, 69 }; // Example normal humidity values
        var currentWindSpeeds = new List<double>();
        var normalWindSpeeds = new List<double> { 10, 12, 9, 11, 10 }; // Example normal wind speed values

        // Ensure we take only 5 days of forecast data
        var filteredForecasts = forecasts.Take(5).ToList();

        foreach (var forecast in filteredForecasts)
        {
            Labels.Add(forecast.Date.ToString("MMM dd", CultureInfo.InvariantCulture)); // Add date below each bar
            maxTemps.Add(forecast.MaxTemperature);
            minTemps.Add(forecast.MinTemperature);
            currentHumidities.Add(forecast.Humidity);
            currentWindSpeeds.Add(forecast.WindSpeed);
        }

        // Temperature Series
        TemperatureSeries.Add(new ChartSeries { Name = "Max Temp", Data = maxTemps.ToArray() });
        TemperatureSeries.Add(new ChartSeries { Name = "Min Temp", Data = minTemps.ToArray() });

        // Humidity Series
        HumiditySeries.Add(new ChartSeries { Name = "Normal Humidity", Data = normalHumidities.Take(filteredForecasts.Count).ToArray() });
        HumiditySeries.Add(new ChartSeries { Name = "Current Humidity", Data = currentHumidities.ToArray() });

        // Wind Speed Series
        WindSpeedSeries.Add(new ChartSeries { Name = "Normal Wind Speed", Data = normalWindSpeeds.Take(filteredForecasts.Count).ToArray() });
        WindSpeedSeries.Add(new ChartSeries { Name = "Current Wind Speed", Data = currentWindSpeeds.ToArray() });

        StateHasChanged();
    }

    private async Task<List<WeatherForecast>> GetWeatherForecasts()
    {
        // Simulated API call - Replace this with actual API fetching
        await Task.Delay(1000);
        return new List<WeatherForecast>
        {
            new() { Date = DateTime.Now, MaxTemperature = 30, MinTemperature = 20, Humidity = 75, WindSpeed = 10 },
            new() { Date = DateTime.Now.AddDays(1), MaxTemperature = 32, MinTemperature = 21, Humidity = 70, WindSpeed = 12 },
            new() { Date = DateTime.Now.AddDays(2), MaxTemperature = 29, MinTemperature = 19, Humidity = 78, WindSpeed = 8 },
            new() { Date = DateTime.Now.AddDays(3), MaxTemperature = 31, MinTemperature = 22, Humidity = 65, WindSpeed = 15 }
        };
    }

  

    public class ForecastResponse
    {
        [JsonPropertyName("list")]
        public List<Forecast> List { get; set; }

        [JsonPropertyName("visibility")]
        public int Visibility { get; set; }

        [JsonPropertyName("clouds")]
        public Clouds Clouds { get; set; }

        [JsonPropertyName("sys")]
        public Sys Sys { get; set; }
    }

    public class Forecast
    {
        [JsonPropertyName("dt")]
        public long Dt { get; set; }

        [JsonPropertyName("main")]
        public MainData Main { get; set; }

        [JsonPropertyName("weather")]
        public List<WeatherDetail> Weather { get; set; }

        [JsonPropertyName("wind")]
        public Wind Wind { get; set; }
    }

    public class MainData
    {
        [JsonPropertyName("temp_min")]
        public float TempMin { get; set; }

        [JsonPropertyName("temp_max")]
        public float TempMax { get; set; }

        [JsonPropertyName("feels_like")]
        public float FeelsLike { get; set; }

        [JsonPropertyName("pressure")]
        public int Pressure { get; set; }

        [JsonPropertyName("humidity")]
        public int Humidity { get; set; }

        [JsonPropertyName("sea_level")]
        public int SeaLevel { get; set; }  // Sea level pressure (hPa)

        [JsonPropertyName("grnd_level")]
        public int GroundLevel { get; set; }
    }

    public class WeatherDetail
    {
        [JsonPropertyName("description")]
        public string Description { get; set; }

        [JsonPropertyName("icon")]
        public string Icon { get; set; }

    }

    public class Wind
    {
        [JsonPropertyName("speed")]
        public float Speed { get; set; }
    }

    public class Clouds
    {
        [JsonPropertyName("all")]
        public int All { get; set; }
    }

    public class Sys
    {
        [JsonPropertyName("sunrise")]
        public long Sunrise { get; set; }

        [JsonPropertyName("sunset")]
        public long Sunset { get; set; }
    }

    public class DailyForecast
    {
        public DateTime Date { get; set; }
        public float TempMin { get; set; }
        public float TempMax { get; set; }
        public float FeelsLike { get; set; }
        public string Description { get; set; }
        public int Humidity { get; set; }
        public int Pressure { get; set; }
        public float WindSpeed { get; set; }
        public int SeaLevel { get; set; }  // Sea level pressure (hPa)
        public int GroundLevel { get; set; }
        public string Icon { get; set; }
    }

    private void ShowTemperatureChart()
    {
        showTemperatureChart = true;
        showHumidityChart = false;
        showWindSpeedChart = false;
    }

    private void ShowHumidityChart()
    {
        showTemperatureChart = false;
        showHumidityChart = true;
        showWindSpeedChart = false;
    }

    private void ShowWindSpeedChart()
    {
        showTemperatureChart = false;
        showHumidityChart = false;
        showWindSpeedChart = true;
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }
        public double MaxTemperature { get; set; }
        public double MinTemperature { get; set; }
        public double Humidity { get; set; }
        public double WindSpeed { get; set; }
    }
}
@page "/weather"
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Collections.Generic
@inject IHttpClientFactory ClientFactory
@inject UserStateManager userState
@inject DatabaseController databaseController
@using BlazorApp.Controllers
@using BlazorApp.Singletons
@using BlazorApp.Models
@using MongoDB.Bson;
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@using System.Globalization

<PageTitle>Weather Forecast</PageTitle>


<MudText Typo="Typo.h3" Align="Align.Center">Weather Forecast</MudText>
<MudText Typo="Typo.body1" Align="Align.Center">Enter a city name to get weather data.</MudText>

<MudCard Class="rounded-lg w-50 my-4 py-8 mx-auto" Elevation="5">
    <MudContainer MaxWidth="MaxWidth.Small">
        <MudTextField Class="mt-2" @bind-Value="@cityName" Label="Enter City Name" Variant="Variant.Outlined" OnKeyDown="HandleKeyDown" Required />
        <MudTextField Class="mt-2" @bind-Value="@numDays" Label="Enter Days (1-5)" Variant="Variant.Outlined" Type="number" />
        <MudTooltip Text="Fetch Weather Forecast">
            <MudButton Class="mt-2" OnClick="@FetchWeatherData" Variant="Variant.Outlined" Color="Color.Primary">Get Weather</MudButton>
        </MudTooltip>
        @if (userState.IsLoggedIn())
        {
            <MudTooltip Text="Add to Fav cities">
                <MudButton Class="mt-2" OnClick="@SaveToFavorites" StartIcon="@Icons.Material.Filled.Favorite" Variant="Variant.Text" Color="Color.Secondary">
                    Add to Fav cities
                </MudButton>
            </MudTooltip>
        }
    </MudContainer>
</MudCard>

@if (dailyForecasts != null && dailyForecasts.Count > 0)
{
    <MudText Typo="Typo.h5" Align="Align.Center">Weather Forecast for @cityName</MudText>
    <MudGrid JustifyContent="Center" Class="mt-4">
        @foreach (var forecast in dailyForecasts)
        {
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudCard Class="p-4 text-center">
                    <MudText Typo="Typo.h6">@forecast.Date.ToString("dddd, MMM dd")</MudText>
                    <img src="@GetWeatherIcon(forecast.Icon)" alt="@forecast.Description" width="100" height="100" />

                    <MudText Typo="Typo.subtitle1">@forecast.Description</MudText>
                    <MudText Typo="Typo.body2">Temp: Min @forecast.TempMin°C - Max @forecast.TempMax°C</MudText>
                    <MudText Typo="Typo.body2">Feels Like: @forecast.FeelsLike°C</MudText>
                    <MudText Typo="Typo.body2">Wind: @forecast.WindSpeed m/s</MudText>
                    @if (userState.IsLoggedIn())
                    {
                        <MudText Typo="Typo.body2">Humidity: @forecast.Humidity%</MudText>
                        <MudText Typo="Typo.body2">Pressure: @forecast.Pressure </MudText>
                        <MudText Typo="Typo.body2">SeaLevel: @forecast.SeaLevel </MudText>
                        <MudText Typo="Typo.body2">GroundLevel: @forecast.GroundLevel </MudText>
                    }
                </MudCard>
            </MudItem>
        }
    </MudGrid>

    <MudGrid Spacing="4" Justify="Justify.Center" Class="mt-4 mb-6">
        <MudItem xs="12" sm="4">
            <MudButton OnClick="ShowTemperatureChart" Color="Color.Error" Variant="Variant.Outlined" Class="px-5 py-2 mx-2">
                🔥 TEMPERATURE
            </MudButton>
        </MudItem>
        <MudItem xs="12" sm="4">
            <MudButton OnClick="ShowHumidityChart" Color="Color.Info" Variant="Variant.Outlined" Class="px-5 py-2 mx-2">
                💧 HUMIDITY
            </MudButton>
        </MudItem>
        <MudItem xs="12" sm="4">
            <MudButton OnClick="ShowWindSpeedChart" Color="Color.Success" Variant="Variant.Outlined" Class="px-5 py-2 mx-2">
                🌬️ WIND SPEED
            </MudButton>
        </MudItem>
    </MudGrid>


}
else if (showError)
{
    <MudAlert Severity="Severity.Error">Failed to fetch weather data for @cityName.</MudAlert>
}

<!-- Temperature Chart -->
@if (showTemperatureChart)
{
    <MudCard Class="p-3 mt-4 mx-auto" Style="max-width: 600px; max-height: 350px;">
        <MudText Typo="Typo.h6" Class="text-center text-blue-600">📊 Temperature Trends</MudText>
        <MudChart ChartType="ChartType.Bar" ChartSeries="TemperatureSeries" Labels="Labels" Options="chartOptions" />
    </MudCard>
}

<!-- Humidity Chart -->
@if (showHumidityChart)
{
    <MudCard Class="p-3 mt-4 mx-auto" Style="max-width: 600px; max-height: 350px;">
        <MudText Typo="Typo.h6" Class="text-center text-green-600">📊 Humidity Levels</MudText>
        <MudChart ChartType="ChartType.Bar" ChartSeries="HumiditySeries" Labels="Labels" Options="chartOptions" />
    </MudCard>
}

<!-- Wind Speed Chart -->
@if (showWindSpeedChart)
{
    <MudCard Class="p-3 mt-4 mx-auto" Style="max-width: 600px; max-height: 350px;">
        <MudText Typo="Typo.h6" Class="text-center text-red-600">📊 Wind Speed</MudText>
        <MudChart ChartType="ChartType.Bar" ChartSeries="WindSpeedSeries" Labels="Labels" Options="chartOptions" />
    </MudCard>
}


@code {
    private string cityName = string.Empty;
    private int numDays = 4;
    private List<DailyForecast> dailyForecasts;
    private bool showError = false;
    private int searchCount = 0;  // Track the number of searches
    private readonly int maxSearches = 5;

    private bool showTemperatureChart = false;
    private bool showHumidityChart = false;
    private bool showWindSpeedChart = false;
    private List<string> userAlertPreferences = new();

    private List<string> Labels { get; set; } = new();
    private List<ChartSeries> TemperatureSeries { get; set; } = new();
    private List<ChartSeries> HumiditySeries { get; set; } = new();
    private List<ChartSeries> WindSpeedSeries { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !userState.IsLoggedIn())
        {
            searchCount = await GetSearchCount();  // Get search count from localStorage
            StateHasChanged(); // Re-render the component
        }

    }

    private async Task FetchWeatherData()
    {
        showError = false;

        if (string.IsNullOrWhiteSpace(cityName) || numDays < 1 || numDays > 5)
        {
            showError = true;
            return;
        }

        if (!userState.IsLoggedIn())
        {
            if (searchCount >= maxSearches)
            {
                Snackbar.Add("Search limit reached! Please log in to continue.", Severity.Warning);
                return;
            }

            searchCount++;
            await SetSearchCount(searchCount);
        }

        var client = ClientFactory.CreateClient();
        var requestUri = $"https://api.openweathermap.org/data/2.5/forecast?q={Uri.EscapeDataString(cityName)}&appid=596a1e71b480c1efbdbdd4da71b6f8da";

        try
        {
            var response = await client.GetAsync(requestUri);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var forecastResponse = JsonSerializer.Deserialize<ForecastResponse>(json, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                if (forecastResponse != null)
                {
                    dailyForecasts = forecastResponse.List
                        .GroupBy(forecast => DateTimeOffset.FromUnixTimeSeconds(forecast.Dt).Date)
                        .Take(numDays)
                        .Select(group => new DailyForecast
                            {
                                Date = group.Key,
                                TempMin = Convert.ToInt32(group.Min(f => f.Main.TempMin)),
                                TempMax = Convert.ToInt32(group.Max(f => f.Main.TempMax)),
                                FeelsLike = Convert.ToInt32(group.Average(f => f.Main.FeelsLike)),
                                Icon = group.First().Weather[0].Icon,
                                Description = group.First().Weather[0].Description,
                                Humidity = Convert.ToInt32(group.Average(f => f.Main.Humidity)),
                                Pressure = Convert.ToInt32(group.Average(f => f.Main.Pressure)),
                                WindSpeed = group.Average(f => f.Wind.Speed),
                                SeaLevel = group.First().Main.SeaLevel,  // Get Sea Level pressure from main data
                                GroundLevel = group.First().Main.GroundLevel,

                            })
                        .ToList();

                    await LoadWeatherData();
                }


            }
            else
            {
                showError = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            showError = true;
        }
    }

    private async Task<int> GetSearchCount()
    {
        try
        {
            var count = await JS.InvokeAsync<int?>("localStorage.getItem", "weatherSearchCount");
            return count ?? 0;
        }
        catch
        {
            return 0;
        }
    }

    // Set search count in localStorage
    private async Task SetSearchCount(int count)
    {
        await JS.InvokeVoidAsync("localStorage.setItem", "weatherSearchCount", count);
    }

    // Reset search count when the user logs in
    private async Task ResetSearchCount()
    {
        await SetSearchCount(0);
    }
    private async Task SaveToFavorites()
    {
        if (!string.IsNullOrWhiteSpace(cityName) && userState.IsLoggedIn())
        {
            var userEmail = userState.UserEmail;

            if (!string.IsNullOrEmpty(userEmail))
            {
                await databaseController.AddFavoriteCity(cityName, userEmail);
                Snackbar.Add($"{cityName} added to favorites!", Severity.Success);
            }
            else
            {
                Console.WriteLine("User email is null or empty in UserStateManager.");
                Snackbar.Add("Unable to determine user email. Please log in again.", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Please enter a city name and ensure you're logged in.", Severity.Warning);
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await FetchWeatherData();
        }
    }

    [Inject] NavigationManager NavigationManager { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await LoadWeatherData();
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var city = queryParams["city"];

        if (!string.IsNullOrEmpty(city))
        {
            cityName = city;
            await FetchWeatherData(); // Automatically fetch weather on page load
        }
    }

    private string GetWeatherIcon(string iconCode)
    {
        if (string.IsNullOrEmpty(iconCode))
        {
            // Default to a cloud icon (partly cloudy) instead of an empty image
            return "https://openweathermap.org/img/wn/02d@2x.png";
        }

        return $"https://openweathermap.org/img/wn/{iconCode}@2x.png";
    }

    private async Task LoadWeatherData()
    {
        var forecasts = await GetWeatherForecasts();
        Labels.Clear();
        TemperatureSeries.Clear();
        HumiditySeries.Clear();
        WindSpeedSeries.Clear();

        var maxTemps = new List<double>();
        var minTemps = new List<double>();
        var currentHumidities = new List<double>();
        var normalHumidities = new List<double> { 70, 65, 68, 72, 69 }; // Example normal humidity values
        var currentWindSpeeds = new List<double>();
        var normalWindSpeeds = new List<double> { 10, 12, 9, 11, 10 }; // Example normal wind speed values

        // Ensure we take only 5 days of forecast data
        var filteredForecasts = forecasts.Take(5).ToList();

        foreach (var forecast in filteredForecasts)
        {
            Labels.Add(forecast.Date.ToString("MMM dd", CultureInfo.InvariantCulture)); // Add date below each bar
            maxTemps.Add(forecast.MaxTemperature);
            minTemps.Add(forecast.MinTemperature);
            currentHumidities.Add(forecast.Humidity);
            currentWindSpeeds.Add(forecast.WindSpeed);
        }

        // Temperature Series
        TemperatureSeries.Add(new ChartSeries { Name = "Max Temp", Data = maxTemps.ToArray() });
        TemperatureSeries.Add(new ChartSeries { Name = "Min Temp", Data = minTemps.ToArray() });

        // Humidity Series
        HumiditySeries.Add(new ChartSeries { Name = "Normal Humidity", Data = normalHumidities.Take(filteredForecasts.Count).ToArray() });
        HumiditySeries.Add(new ChartSeries { Name = "Current Humidity", Data = currentHumidities.ToArray() });

        // Wind Speed Series
        WindSpeedSeries.Add(new ChartSeries { Name = "Normal Wind Speed", Data = normalWindSpeeds.Take(filteredForecasts.Count).ToArray() });
        WindSpeedSeries.Add(new ChartSeries { Name = "Current Wind Speed", Data = currentWindSpeeds.ToArray() });

        StateHasChanged();
    }

    private async Task<List<WeatherForecast>> GetWeatherForecasts()
    {
        // Simulated API call - Replace this with actual API fetching
        await Task.Delay(1000);
        return new List<WeatherForecast>
        {
            new() { Date = DateTime.Now, MaxTemperature = 30, MinTemperature = 20, Humidity = 75, WindSpeed = 10 },
            new() { Date = DateTime.Now.AddDays(1), MaxTemperature = 32, MinTemperature = 21, Humidity = 70, WindSpeed = 12 },
            new() { Date = DateTime.Now.AddDays(2), MaxTemperature = 29, MinTemperature = 19, Humidity = 78, WindSpeed = 8 },
            new() { Date = DateTime.Now.AddDays(3), MaxTemperature = 31, MinTemperature = 22, Humidity = 65, WindSpeed = 15 }
        };
    }


 

    public class ForecastResponse
    {
        [JsonPropertyName("list")]
        public List<Forecast> List { get; set; }

        [JsonPropertyName("visibility")]
        public int Visibility { get; set; }

        [JsonPropertyName("clouds")]
        public Clouds Clouds { get; set; }

        [JsonPropertyName("sys")]
        public Sys Sys { get; set; }
    }

    public class Forecast
    {
        [JsonPropertyName("dt")]
        public long Dt { get; set; }

        [JsonPropertyName("main")]
        public MainData Main { get; set; }

        [JsonPropertyName("weather")]
        public List<WeatherDetail> Weather { get; set; }

        [JsonPropertyName("wind")]
        public Wind Wind { get; set; }
    }

    public class MainData
    {
        [JsonPropertyName("temp_min")]
        public float TempMin { get; set; }

        [JsonPropertyName("temp_max")]
        public float TempMax { get; set; }

        [JsonPropertyName("feels_like")]
        public float FeelsLike { get; set; }

        [JsonPropertyName("pressure")]
        public int Pressure { get; set; }

        [JsonPropertyName("humidity")]
        public int Humidity { get; set; }

        [JsonPropertyName("sea_level")]
        public int SeaLevel { get; set; }  // Sea level pressure (hPa)

        [JsonPropertyName("grnd_level")]
        public int GroundLevel { get; set; }
    }

    public class WeatherDetail
    {
        [JsonPropertyName("description")]
        public string Description { get; set; }

        [JsonPropertyName("icon")]
        public string Icon { get; set; }

    }

    public class Wind
    {
        [JsonPropertyName("speed")]
        public float Speed { get; set; }
    }

    public class Clouds
    {
        [JsonPropertyName("all")]
        public int All { get; set; }
    }

    public class Sys
    {
        [JsonPropertyName("sunrise")]
        public long Sunrise { get; set; }

        [JsonPropertyName("sunset")]
        public long Sunset { get; set; }
    }

    public class DailyForecast
    {
        public DateTime Date { get; set; }
        public float TempMin { get; set; }
        public float TempMax { get; set; }
        public float FeelsLike { get; set; }
        public string Description { get; set; }
        public int Humidity { get; set; }
        public int Pressure { get; set; }
        public float WindSpeed { get; set; }
        public int SeaLevel { get; set; }  // Sea level pressure (hPa)
        public int GroundLevel { get; set; }
        public string Icon { get; set; }
    }

    private void ShowTemperatureChart()
    {
        showTemperatureChart = true;
        showHumidityChart = false;
        showWindSpeedChart = false;
    }

    private void ShowHumidityChart()
    {
        showTemperatureChart = false;
        showHumidityChart = true;
        showWindSpeedChart = false;
    }

    private void ShowWindSpeedChart()
    {
        showTemperatureChart = false;
        showHumidityChart = false;
        showWindSpeedChart = true;
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }
        public double MaxTemperature { get; set; }
        public double MinTemperature { get; set; }
        public double Humidity { get; set; }
        public double WindSpeed { get; set; }
    }
}
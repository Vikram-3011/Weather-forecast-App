@page "/change-password"
@using BlazorApp.Services
@inject AuthService AuthService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
<MudContainer MaxWidth="MaxWidth.False" Class="mt-10 d-flex justify-center">
    <MudPaper Elevation="7" Class="glass-card p-8 m-3 " Style="width: 100%; max-width: 700px;">
        <MudText Typo="Typo.h4" Align="Align.Center" Class="font-bold mb-6 mt-5">
            <MudIcon Icon="@Icons.Material.Filled.Lock" Class="me-2 " /> Change Password
        </MudText>

        <MudStack Class="custom-input ml-15 mr-15" Spacing="4">
            <MudTextField T="string" @bind-Value="currentPassword" Label="Current Password" Variant="Variant.Outlined "
                          InputType="InputType.Password" Required Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.LockOpen" />

            <MudTextField T="string" @bind-Value="newPassword" Label="New Password" Variant="Variant.Outlined"
                          InputType="InputType.Password" Required Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Lock" />

            <MudTextField T="string" @bind-Value="confirmPassword" Label="Confirm New Password" Variant="Variant.Outlined"
                          InputType="InputType.Password" Required Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Lock" />
        </MudStack>

        <MudDivider Class="my-6" />

        <MudStack Row="true" JustifyContent="JustifyContent.End" Spacing="2">
            <MudButton Variant="Variant.Text" Color="Color.Info" OnClick="HandleChangePassword" Class="hover-effect ml-6 mr-5  mb-7">
                Change Password
            </MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Inherit" StartIcon="@Icons.Material.Filled.ArrowBack" OnClick="Back" Class="hover-effect ml-6 mr-5  mb-7">
                Back
            </MudButton>
        </MudStack>
    </MudPaper>
</MudContainer>

<style>
    .glass-card {
        background: rgba(255, 255, 255, 0.12);
        border-radius: 1.5rem;
        backdrop-filter: blur(15px);
        -webkit-backdrop-filter: blur(15px);
        border: 1px solid rgba(255, 255, 255, 0.25);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.25);
        color: white;
    }

    .hover-effect {
        transition: all 0.3s ease;
    }

        .hover-effect:hover {
            transform: scale(1.03);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        }

    

    .custom-input .mud-input {
        background: transparent !important; /* Removes background */
        color: white !important; /* Text remains visible */
        border-color: white !important; /* Keeps borders visible */
    }

    .custom-input .mud-input-label {
        background: transparent !important; /* Fix label background */
        color: white !important; /* Ensures readability */
    }
</style>
@code {
    private string currentPassword = string.Empty;
    private string newPassword = string.Empty;
    private string confirmPassword = string.Empty;

    private async Task HandleChangePassword()
    {
        if (string.IsNullOrEmpty(currentPassword) || string.IsNullOrEmpty(newPassword) || string.IsNullOrEmpty(confirmPassword))
        {
            Snackbar.Add("All fields are required.", Severity.Error);
            return;
        }

        if (newPassword != confirmPassword)
        {
            Snackbar.Add("New password and confirmation do not match.", Severity.Error);
            return;
        }

        try
        {
            var success = await AuthService.ChangePassword(currentPassword, newPassword);
            if (success)
            {
                Snackbar.Add("Password updated successfully!", Severity.Success);
                NavigationManager.NavigateTo("/user-profile");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to change password: {ex.Message}", Severity.Error);
        }
    }

    private void Back()
    {
        NavigationManager.NavigateTo("/user-profile");
    }
}

@page "/user-profile"
@inject PersonalInfoService PersonalInfoService
@inject UserStateManager userState
@using BlazorApp.Models
@using BlazorApp.Services
@using BlazorApp.Singletons
@inject ISnackbar Snackbar
@inject AuthService authService
@inject NavigationManager NavigationManager

<PageTitle>User Profile</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-5 d-flex justify-center" Style="max-width: 800px; width: 100%;">
    <MudPaper Elevation="10" Class="glass-card p-6">
        <MudText  Typo="Typo.h4" Align="Align.Center" Class="mb-4 mt-5 font-bold">
            <MudIcon Icon="@Icons.Material.Filled.Person" Class="me-2" /> User Profile
        </MudText>

        @if (isLoading)
        {
            <div class="d-flex flex-column align-items-center my-4">
                <MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true" />
                <MudText Typo="Typo.h6" Color="Color.Primary" Align="Align.Center" Class="mt-3">
                    Loading user data, please wait...
                </MudText>
            </div>
        }
        else if (user != null)
        {
            <MudStack Spacing="2">
                <MudText Class="mt-5 ml-6" Typo="Typo.body1">
                    <MudIcon Icon="@Icons.Material.Filled.Person" /> <strong>Name:</strong> @user.Name
                </MudText>
                <MudText Class="mt-5 ml-6" Typo="Typo.body1">
                    <MudIcon Icon="@Icons.Material.Outlined.Email" /> <strong>Email:</strong> @user.Email
                </MudText>
                <MudText Class="mt-5 ml-6" Typo="Typo.body1">
                    <MudIcon Icon="@Icons.Material.Outlined.Phone" /> <strong>Phone:</strong> @user.Phone
                </MudText>
                <MudText Class="mt-5 ml-6" Typo="Typo.body1">
                    <MudIcon Icon="@Icons.Material.Outlined.LocationCity" /> <strong>Address:</strong> @user.City
                </MudText>
                <MudText Class="mt-5 ml-6" Typo="Typo.body1">
                    <MudIcon Icon="@Icons.Material.Outlined.Public" /> <strong>Country:</strong> @user.Country
                </MudText>
            </MudStack>

            <MudDivider Class="my-5" />

            <MudStack Row="true" Spacing="2" JustifyContent="JustifyContent.Center">
                <MudButton Variant="Variant.Text" Color="Color.Info" StartIcon="@Icons.Material.Outlined.Password" OnClick="NavigateToChangePassword" Class="hover-effect ml-8 mr-5 mb-6 mt10">
                    Change Password
                </MudButton>

                <MudButton Variant="Variant.Text" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Edit" OnClick="NavigateToEditProfile" Class="hover-effect  ml-8 mr-5 mb-6 mt10">
                    Edit Profile
                </MudButton>
            </MudStack>
        }
        else
        {
            <MudText Typo="Typo.h6" Class="text-center" Color="Color.Error">
                Failed to load user data.
            </MudText>
        }
    </MudPaper>
</MudContainer>


<style>
    body {
        background: linear-gradient(135deg, #3a0ca3, #240046);
        margin: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .glass-card {
        background: rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(15px);
        -webkit-backdrop-filter: blur(15px);
        border-radius: 16px;
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: white;
        width: 100%;
    }

    .hover-effect {
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        border-radius: 8px;
    }

        .hover-effect:hover {
            transform: scale(1.05);
            box-shadow: 0px 5px 15px rgba(255, 255, 255, 0.1);
        }

    .mud-button-outlined {
        border: 2px solid rgba(255, 255, 255, 0.3) !important;
        color: white !important;
    }

        .mud-button-outlined:hover {
            background-color: rgba(255, 255, 255, 0.1) !important;
        }

    .mud-text {
        color: white;
    }
</style>


@code {
    private PersonalInfo? user;
    private bool isLoading = true;
    private bool showUserDetails = false;

    private void NavigateToEditProfile()
    {
        NavigationManager.NavigateTo($"/edit-profile/{user?.Email}");
    }
    protected override async Task OnInitializedAsync()
    {
        if (userState.IsLoggedIn())
        {
            var loggedInUser = userState.User; // Access the current user
            if (loggedInUser != null)
            {
                try
                {
                    user = await PersonalInfoService.GetUserByEmailAsync(loggedInUser.Email);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error fetching user data: {ex.Message}");
                    Snackbar.Add("Error fetching user data.", Severity.Error);
                }
            }
        }
        isLoading = false;

        // If user data is not found, redirect to the personal-info page
        if (user == null)
        {
            Snackbar.Add("No user details found. Please enter your personal information.", Severity.Warning);
            NavigationManager.NavigateTo("/personal-info");
        }
    }

    private void NavigateToChangePassword()
    {
        NavigationManager.NavigateTo("/change-password");
    }

}
